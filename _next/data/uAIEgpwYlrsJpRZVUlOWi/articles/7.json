{"pageProps":{"post":{"slug":"7","content":"かたおかです！\nRibbonCMSではPythonとNPMを使っているのでビルド時の依存関係のインストールに時間がかかります。\n記事投稿に毎回数分かかるとめんどうなのでどうにかキャッシュできないかをテストしてみます。\n\n## ビルド時間の短縮\nGitHub ActionsでのCI/CDでは依存関係インストールがつきものです。\nPythonだと`pip`とか，フロントだと`npm`とか。\nただ，これのインストールって結構時間かかります。\n依存が大きいとインストールだけで数分とかかかってしまうので，頻繁に発動するActionsだとこれだけで大きな時間損失です。\n<br/>\n\nRibbonCMSではビルドを2回行います。\nまず、Issueを`.json`ファイルなどに変換するためのビルド（Issueビルドと呼んでます）です。\nこれはPythonを用いて行っています。\n次に、Issueビルドで生成した結果をもとにしたフロント側のビルドです。\nこれによりNext.jsを用いてhtmlなどを生成しています。\n<br/>\n\nこのような仕組みのため、RibbonCMSではPythonとNPMの両方のパッケージインストールを必要としています。\n記事投稿や編集のために毎回これをしているので，このインストール時間がかなりネックになってしまっている現状です。\n\n## なんか失敗する．．\n\n`Cache not found for input keys: ` といわれnpmのキャッシュ利用がなんか失敗した。\n↓記事を見る限り，キャッシュの保存に失敗してる様子\n\nhttps://qiita.com/akubi0w1/items/2f4bf5d3ce7e5e77dfd7\n\nあ！`actions/cache`の`path`が間違ってそう・・・？\n```yaml\n    - uses: actions/cache@v3\n      id: node_modules_cache_id\n      env:\n        cache-name: cache-node-modules\n      with:\n        path: 'src/node_modules'\n        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('front/src/package-lock.json') }}\n```\n正しくは，`path: front/src/node_modules`かな？\nこれでうまくいってくれ・・・！\n\n## cache読み込めてそうだけど早くならない\ncache読み込んだらインストールしないようにすべき？\nやってみる\n<br/>\n\n-> 単純にインスト―ルしないようにするとエラーになった\ncacheリストアだけだとやっぱりpipが読み込めていないぽい\nvenvをcacheしてみよう。\nこれならいけるやろ！\n<br/>\n\n-> ModuleNotFoundになった😢\nvenvのactivateを毎回やらないとだめっぽい。\nPython実行前に毎stepでactivateしてみる。\n<br/>\n\n-> いけたっぽい\nあと，Nodeの方もうまくいってた\nこっちは`npm ci`の実行をcacheの有無で制御しただけだったけど時間短縮してビルドもできてた\nあとはpipのcacheで2回目がはやくなってるかどうか\n<br/>\n\n-> 成功！\n合計1分程ビルド時間を短縮できた！\n2m30sから1m30sなので40%くらい時間削減できたのかな？\n\n## まとめ\n`actions/cache`でpipとnpmの依存関係インストール時間を短縮した。\npipはvenvを作成してそのenvをcacheするとうまくいった。\nnpmは`node_modules`をcacheするとうまくいった。\n加えてcacheするだけだと，cache読み込み後インストールを開始して結局時間が変わらなくなるので，cacheがあればインストールをしないように`if`をする必要があった。\n\n↓Python部分のyaml（抜粋）\n```yaml\n    - uses: actions/setup-python@v4\n      id: setup_python_id\n      with:\n        python-version: '3.9'\n\n    - uses: actions/cache@v3\n      id: cache-venv\n      with:\n        # side_mはpythonプログラムのルートディレクトリ\n        path: side_m/.venv\n        key: ${{ runner.os }}-venv-${{ hashFiles('side_m/requirements.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-venv-\n\n    - name: Create venv\n      if: steps.cache-venv.outputs.cache-hit != 'true'\n      run: |\n        cd side_m\n        python -m venv .venv\n        . ./.venv/bin/activate\n        pip install -r requirements.txt\n\n    - name: Check Publish flag\n      run: |\n        cd side_m\n        . ./.venv/bin/activate\n        python3 check.py\n```\n\n↓ Next.js部分のyaml（抜粋）\n```yaml\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: 16.x.x\n\n    - uses: actions/cache@v3\n      id: node_modules_cache_id\n      env:\n        cache-name: cache-node-modules\n      with:\n        # front/src/はフロントエンドプログラムのルートディレクトリ\n        path: 'front/src/node_modules'\n        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('front/src/package-lock.json') }}\n\n    - name: Install NPM packages\n      if: ${{ steps.node_modules_cache_id.outputs.cache-hit != 'true' }}\n      run: npm ci\n      working-directory: ./front/src\n```\n\nこんな感じでキャッシュしました。\n試行錯誤しながらなので他にベストプラクティスあるかもです！\n\nもっといい方法を見つけたら追記しますね\n\n## 追記（2022-07-02）\nNext.jsの静的ビルドを実行するので `.next/cache` をキャッシュすると速くなるかも。\nということで試してみます。\n<br />\n\n-> [このサイト](https://www.suhanwijaya.com/posts/use-github-actions-deploy-nextjs-ssg-site)の通りやってみたけど，`Warning: Path Validation Error: Path(s) specified in the action for caching do(es) not exist, hence no cache is being saved.`って言われてキャッシュできなかった。\n<br />\n\npathの指定が間違ってるみたい。参考サイトだと`node_modules`と`.next/cache`を一緒にキャッシュしようとしていたので，以下のように別々にキャッシュしてみる。\n\n```yaml\n    - uses: actions/cache@v3\n      id: cache-node-modules\n      with:\n        path: 'front/src/node_modules'\n        key: ${{ runner.os }}-node-modules-${{ hashFiles('front/src/package-lock.json') }}\n\n    - uses: actions/cache@v3\n      id: cache-nextjs\n      with:\n        path: 'front/src/.next/cache'\n        key: ${{ runner.os }}-nextjs-${{ hashFiles('front/src/package-lock.json') }}-${{ hashFiles('front/src/**/*.js') }}\n```\n\n速くなるか？？\n<br />\n\nビルド完了までは～10sくらい（？）若干速くなった\n`.next/cache`の読み込みや保存に結構時間かかるのでトータルでは遅くなる。\nただしビルド完了してpushした後にキャッシュ保存をするとキャッシュ保存部分の時間は無視できるのでその分でちょっと速くなった。\n\nではでは\n","title":"GitHub Actionsでビルドを高速化したい！","posted_at":"2022年06月27日 20時43分","updated_at":"2022年07月03日 15時34分","tags":[{"name":"開発","color":"62F7C5","description":""},{"name":"RibbonCMS","color":"fff03c","description":""}],"description":"かたおかです！ RibbonCMSではPythonとNPMを使っているのでビルド時の依存関係のインストールに時間がかかります。 記事投稿に毎回数分かかるとめんどうなのでどうにかキャッシュできないかをテストしてみます。  ## ビルド時間の短縮 GitHub ActionsでのCI/CDでは依存関係インストールがつきものです。 Pythonだと`pip`とか，フロントだと`npm`とか。 ただ，これ..."},"config":{"blog_title":"かたおかの雑談配信","site_introduction":"かたおかのブログです。主に趣味関係をだらだら書いていきます。日本文化が好きです。","copylight_name":"ShotaroKataoka","copylight_url":"https://github.com/ShotaroKataoka","issues_page_url":"https://github.com/ShotaroKataoka/ShotaroKataoka.github.io/issues","favicon_image_url":"https://user-images.githubusercontent.com/42331656/175220729-c255f8b0-e709-4efc-a8e6-dc2e29a92c35.png","author_name":"かたおか","author_introduction":"かたおかです。アイコンはみかん。","avatar_image_url":{"url":"https://user-images.githubusercontent.com/42331656/175183205-06dc6033-af20-44b9-ae3d-c3e68770a1f3.png","path":"/static/images/config/avatar.webp"},"sns":[{"name":"GitHub","url":"https://github.com/ShotaroKataoka"},{"name":"Twitter","url":"https://twitter.com/KataokaShotaro"},{"name":"Facebook","url":"https://www.facebook.com/profile.php?id=100014221270440"},{"name":"LinkedIn","url":"https://www.linkedin.com/in/shotarokataoka/"},{"name":"Instagram","url":"https://www.instagram.com/s.kataoka_/?hl=ja"}]},"postsMap":{"5":{"slug":"5","title":"汎用版RibbonCMS完成！","tags":[{"name":"star","color":"fbca04","description":""},{"name":"開発","color":"62F7C5","description":""},{"name":"RibbonCMS","color":"fff03c","description":""},{"name":"Next.js","color":"E63EC8","description":""}],"posted_at":"2022年06月24日 14時24分","content":"","updated_at":"","description":""},"8":{"slug":"8","title":"Next.js + MUIで画面がちらつく（FOUC問題）","tags":[{"name":"開発","color":"62F7C5","description":""},{"name":"RibbonCMS","color":"fff03c","description":""},{"name":"Next.js","color":"E63EC8","description":""}],"posted_at":"2022年06月28日 11時17分","content":"","updated_at":"","description":""}},"metadata":{"https://qiita.com/akubi0w1/items/2f4bf5d3ce7e5e77dfd7":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"GitHub Actionsのcacheでどハマりした - Qiita","description":"\n\nはじめに\n\nタイトルそのままのことがおこりました。\n\n4/15追記: 今回ハマったこと自体は、原因がわかり、形的に成功しているように見えるのですが、8割解決してないです。\nこちらも合わせてどうぞ...。\nGitHub Action...","image_url":"/static/images/external_ogp//f6c4804976e9c023caa6f5e40aa4d283.webp","site_name":"Qiita"},"https://qiita.com/cawauchi/items/165f71cf67e90279a5d7":{"url_domain":"qiita.com","url_domain_link":"https://qiita.com","title":"Next.jsで初期レンダリングの際のCSSが効かないときの対処法 - Qiita","description":"以下のように初期レンダリングの際に一瞬CSSが当たらない問題をFOUCというそうです\n\n\nCSS @importルールを使用している一部のページでは、MS Internet ExplorerのWindows版で、スタイル化されていない...","image_url":"/static/images/external_ogp//f484656886289537ccd4c7f5d46af69c.webp","site_name":"Qiita"}},"relatedPosts":[{"slug":"8","title":"Next.js + MUIで画面がちらつく（FOUC問題）","tags":[{"name":"開発","color":"62F7C5","description":""},{"name":"RibbonCMS","color":"fff03c","description":""},{"name":"Next.js","color":"E63EC8","description":""}],"posted_at":"2022年06月28日 11時17分","content":"","updated_at":"","description":""},{"slug":"5","title":"汎用版RibbonCMS完成！","tags":[{"name":"star","color":"fbca04","description":""},{"name":"開発","color":"62F7C5","description":""},{"name":"RibbonCMS","color":"fff03c","description":""},{"name":"Next.js","color":"E63EC8","description":""}],"posted_at":"2022年06月24日 14時24分","content":"","updated_at":"","description":""}]},"__N_SSG":true}